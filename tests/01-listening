#!/usr/bin/env python3

import json
import os
import socket
import tempfile
import time
import unittest
from subprocess import check_call, check_output


class TestDeployment(unittest.TestCase):
    def setUp(self):
        version = check_output(['juju', 'version'], universal_newlines=True)
        if version < '2':
            raise Exception('only Juju 2.0 or newer is tested')

        deploy("""
series: trusty
services:
  test-gogs:
    # See https://pad.lv/1571254
    # Can't seem to deploy a multiseries charm here (cs:~cmars/gogs)
    charm: %(JUJU_REPOSITORY)s/trusty/gogs
    expose: True
    num_units: 1
  test-gogs-db:
    charm: cs:trusty/postgresql
    num_units: 1
relations:
  - - test-gogs:db
    - test-gogs-db:db
""" % os.environ)
        wait_for('test-gogs')

    def test_something_is_listening(self):
        out = check_output(['juju', 'status', '--format', 'json'], universal_newlines=True)
        juju_status = json.loads(out)
        gogs_info = [x for x in juju_status.get('services', {}).get('test-gogs', {}).get('units', {}).values()]
        if not gogs_info:
            raise Exception("missing gogs service unit")
        addr = gogs_info[0]['public-address']

        for i in range(10):
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                    s.connect((addr, 3000))
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                    s.connect((addr, 3022))
                return
            except:
                time.sleep(1)
        raise Exception("failed to connect")


def deploy(bundle_yaml):
    f = tempfile.NamedTemporaryFile(suffix=".yaml", mode='w', encoding='utf-8', delete=False)
    try:
        print(bundle_yaml, file=f)
    finally:
        f.close()
    try:
        check_call(['juju', 'deploy', f.name])
    finally:
        os.unlink(f.name)


def wait_for(svc, req_status='active', timeout=900, delay=5):
    for i in range(0, timeout, delay):
        time.sleep(delay)
        out = check_output(['juju', 'status', '--format', 'json'], universal_newlines=True)
        juju_status = json.loads(out)
        svc_status = juju_status.get('services', {}).get(svc, {}).get('service-status', {}).get('current')
        if svc_status == req_status:
            return
    raise Exception("timeout waiting for %s to reach %s status" % (svc, req_status))


if __name__ == '__main__':
    unittest.main()
